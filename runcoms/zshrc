#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
[ -s "${PREZTOINIT=${ZDOTDIR:-$HOME}/.zprezto/init.zsh}" ] && . "$PREZTOINIT"

# Customize to your needs...

bindkey -e
bindkey '^[[1;9C' forward-word
bindkey '^[[1;9D' backward-word

setopt extended_glob

source <( dotfiles )

zstyle ':completion:*' verbose yes

[ -n "$SSH_CLIENT" ] && PS1="[ssh] $PS1"

# determin platform
[[ $(sw_vers -productName) == "iPhone OS" ]] && export PLATFORM=ios || export PLATFORM=mac

# ==> Caveats Add the following to your zshrc to access the online help:
  unalias run-help
  autoload run-help
  HELPDIR=/usr/local/share/zsh/help
  
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

compdef ping6=ping
compdef _gnu_generic curl emacs emacsclient file head mv paste
compdef _gnu_generic tail touch scrot shred watch wc zsh
compdef _gnu_generic io _ObjC_Tool


# source "$ZDOTDIR/../loader/loader.zsh"
#source global shit
# loader_addpath "${SSHHOME:-$HOME}/.sshrc.d"
# loader_addpath "$ZDOTDIR/../profile"
# include "profile.global.zsh"
# include "profile.$PLATFORM.zsh"




# declare -a SRCES FILES
# for SRC in "${DOTFILES}"/alex/(*.sh|*.zsh); { source $SRC && SRCES+=`basename $SRC` }

# printf "Sourced from $SRCES!"

# . $HOME/dotfiles/shell/sourcery.sh
#export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
# export NARWHAL_ENGINE=jsc
# export PATH="/usr/local/narwhal/bin:$PATH"


export CAPP_BUILD="/cap/cappuccino/Build"

source /Users/localadmin/.iterm2_shell_integration.zsh


: ' PLATFORM LOADER
'
# if [[ -z $SSHRC_LOADED ]]; then
 # unset SSHRC_LOADED
  

  # loader_addpath "${SSHHOME:-$HOME/dotfiles}/.sshrc.d"
  
  # SOURCEFROM="${SSHHOME:-$HOME}/.sshrc.d/profile.global"
  # include SOURCEFROM
  # [[ -f  ]] && source "$SOURCEFROM" || SOURCEFROM=
  # source based on platform
  # [[ -f PLATFORM_SCRIPT="$SOURCEFROM/,,/profile.$PLATFORM" ]] && source "$PLATFORM_SCRIPT" || PLATFORM_SCRIPT="N/A"


  echo "SOURCEFROM:$FG[blue]${SOURCEFROM:-N/A}$FX[none] " \
          "sshhome:$FG[yellow]${SSHHOME:-UNSET!}$FX[none] " \
         "platform:$FG[red]${PLATFORM:-UNKNOWN}$FX[none] " \
          "sourced:$FG[green]$PLATFORM_SCRIPT$FX[none] " 


  # echo "SOURCEFROM:$(/xbin/color blue)${SOURCEFROM:-N/A}$(/xbin/color off) sshhome:${SSHHOME:-$(/xbin/color yellow)UNSET!$(/xbin/color off)} platform:${PLATFORM:-$(/xbin/color red)UNKNOWN$(/xbin/color off)}"

  # [[ -z "$SSHHOME" ]]  && export LOADFROM="$(dirname $0)" || export LOADFROM="$SSHHOME/.sshrc.d"

  # export -g SSHRC_LOADED=YES
  
# else
  
#   PARENT_COMMAND="$(ps -o comm= $PPID)"
#   echo "trying to load twice, called from $PARENT_COMMAND"
#
# fi




# Defines environment variables.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#
# declare -a SOURCES
# DEBUG=1
# alias PATHCT='echo $PATH | tr ':' '\n' | wc -l'

sourcing(){ 

  # /bin/echo -n "sourcing $@"  | sed 's:/Users/localadmin:~:g'
  # SOURCES+="$@"
  # [[ $DEBUG ]] && echo "$(basename $@)"
  # [[ -L "$@" ]]; {
  #   local link="$(/usr/bin/readlink $@)"
  #   SOURCES+="$(echo \[$(/xbin/color cyan)$link$(/xbin/color off)])"
  #   [[ $DEBUG ]] && echo "$link"
  # }
  # . "$@"
  # echo "path after $(basename $@) ... $(/xbin/color magenta)`PATHCT`$(/xbin/color off)"
  # typeset -U PATH
  # export SOURCES
}


export IPHONE_SIMULATOR_ROOT='/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.1.sdk'


# # Source this file in your shell to enable stderred for all commands
# [[ ! "$LD_PRELOAD" == *libstderred.so* ]] && {
#
#     [[ -f /usr/lib/libstderred.so ]]   && export LD_PRELOAD="/usr/lib/libstderred.so${LD_PRELOAD:+:$LD_PRELOAD}"\
# ||  [[ -f /usr/lib64/libstderred.so ]] && export LD_PRELOAD="/usr/lib64/libstderred.so${LD_PRELOAD:+:$LD_PRELOAD}"
#
# }
#

[[ -f ${STDERRRED="/Volumes/2T/ServiceData/git/stderred/build/libstderred.dylib"} ]] &&
 export DYLD_INSERT_LIBRARIES="$STDERRRED${DYLD_INSERT_LIBRARIES:+:$DYLD_INSERT_LIBRARIES}"

typeset -u DYLD_INSERT_LIBRARIES

# export STDERRED_BLACKLIST="^(bash|test.*)$"
# ""/absolute/path/to/build/libstderred.dylib${DYLD_INSERT_LIBRARIES:+:$DYLD_INSERT_LIBRARIES}"
# bold=$(tput bold || tput md)
# red=$(tput setaf 1)
# export STDERRED_ESC_CODE=$(echo -e "$bold$red")

